tt = e[grep("fulltext.pdf", e)]
tt
for(i in length(tt)){gsub("fulltext", paste("fulltext", i, sep = -", tt)}
for(i in length(tt)){#
	gsub("fulltext", paste("fulltext", i, sep = "-", tt))#
	}
for(i in length(tt)){#
	gsub("fulltext", paste("fulltext", i, sep = "-", tt), tt)#
	}
tt
for(i in length(tt)){#
	tt[i] <- gsub("fulltext", paste("fulltext", i, sep = "-", tt), tt[i])#
	}
tt
tt = e[grep("fulltext.pdf", e)]
for(i in 1:length(tt)){#
	tt[i] <- gsub("fulltext", paste("fulltext", i, sep = "-", tt), tt[i])#
	}
tt
tt = e[grep("fulltext.pdf", e)]
for(i in 1:length(tt)){#
	tt[i] <- gsub("fulltext", paste("fulltext", i, sep = "-"), tt[i])#
	}
tt
?download.file
getSpringer <- function(url, outdir)#
{#
	txt <- getURL(url)#
	doc <- htmlParse(txt, asText = TRUE)#
	links <- unlist(xpathSApply(doc, "//a", xmlAttrs))#
	#
	fm <- links[grep("front-matter.pdf", links)]#
	bm <- links[grep("back-matter.pdf", links)]#
	chap <- links[grep("fulltext.pdf", links)]#
	chap <- gsub("^/", "", chap)#
	#
	for(i in 1:length(chap)){#
		chap[i] <- gsub("fulltext", #
			paste("fulltext", i, sep = "-"), chap[i])#
	}#
	dlurl <- paste(url, c(fm, chap, bm), sep = "")#
	dlurl #
	#dir.create(outdir)#
	#
	#
	}
dd = getSpringer(u)
dd
gsub(.*/(.*\\.pdf)$", "\\1", dd)
gsub(".*/(.*\\.pdf)$", "\\1", dd)
paste("Econonmetrics", gsub(".*/(.*\\.pdf)$", "\\1", dd), sep = "/")
?mapply
getSpringer <- function(url, outdir)#
{#
	txt <- getURL(url)#
	doc <- htmlParse(txt, asText = TRUE)#
	links <- unlist(xpathSApply(doc, "//a", xmlAttrs))#
	#
	fm <- links[grep("front-matter.pdf", links)]#
	bm <- links[grep("back-matter.pdf", links)]#
	chap <- links[grep("fulltext.pdf", links)]#
	chap <- gsub("^/", "", chap)#
	#
	for(i in 1:length(chap)){#
		chap[i] <- gsub("fulltext", #
			paste("fulltext", i, sep = "-"), chap[i])#
	}#
	dlurl <- paste(url, c(fm, chap, bm), sep = "")#
	filenames <- gsub(".*/(.*\\.pdf)$", "\\1", dlurl)#
	filenames <- paste(outdir, filenames, sep = "/") #
	dir.create(outdir)#
	mapply(download.file, url = dlurl, destfile = filenames)#
	#
	}
getSpringer(u)
getSpringer(u, "Econometrics")
ls()
dir()
getSpringer <- function(url, outdir)#
{#
	txt <- getURL(url)#
	doc <- htmlParse(txt, asText = TRUE)#
	links <- unlist(xpathSApply(doc, "//a", xmlAttrs))#
	#
	fm <- links[grep("front-matter.pdf", links)]#
	bm <- links[grep("back-matter.pdf", links)]#
	chap <- links[grep("fulltext.pdf", links)]#
	chap <- gsub("^/", "", chap)#
	#
	chapshort <- chap#
	for(i in 1:length(chap)){#
		chapshort[i] <- gsub("fulltext", #
			paste("fulltext", i, sep = "-"), chap[i])#
	}#
	#
	dlurl <- paste(url, c(fm, chap, bm), sep = "")#
	fileurl <- paste(url, c(fm, chapshort, bm), sep = "")#
	#
	filenames <- gsub(".*/(.*\\.pdf)$", "\\1", fileurl)#
	filenames <- paste(outdir, filenames, sep = "/") #
	#
	dir.create(outdir)#
	mapply(download.file, url = dlurl, destfile = filenames)#
	#
	}
getSpringer(u, "Econometrics")
debug(getSpringer)
getSpringer(u, "Econometrics")
chap
chapshort
dlurl
fileurl
filenames
Q
d
e
unlist(e)
grep("fulltext.pdf", e)
e[grep("fulltext.pdf", e)]
rep(letters[1:6], each = 3)
rep(LETTERS[1:6], each = 3)
sample(rep(LETTERS[1:6], each = 3))
?confint
?pmin(
)
pmin(1:5)
pmin(1:5, 5:1)
pmin(1:9, 9:1)
df = data.frame(a = 1:20, b = 20:1)
df
pmin(df)
pmin(df[1], df[2])
pmin
?outer
x = 1:9
x%o%x
install.packages("hyperSpec")
library(hyperSpec)
)(q
 w= cimishourly("006")
xyplot(air_temp ~ datetime, data = w, type = "l")
xyplot(precip ~ datetime, data = w, type = "l")
 w= cimishourly("077")
xyplot(precip ~ datetime, data = w, type = "l")
xyplot(cumsum(precip) ~ datetime, data = w, type = "l")
w = cimisannual("006", 2008, "hourly")
q()
n
q()
n
w = mcimisannual(6, 1999:2008, period = "hourly")
dir()
mcimisannual(6, 1990:2008, period = "hourly")
w = mcimisannual(6, 1990:2008, period = "hourly")
w$air_temp
is.na(w$air_temp)
which(is.na(w$air_temp))
library(Hmisc)
w2 = impute(w$air_temp)
ts(w2)
length(w2)
acf(ts(w2), lag = 166560)
?acf
acf(ts(w2), type = "covariance", lag = 166560)
ts(w2, frequency = 365)
acf(ts(w2, frequency = 365))
length(w2)/365
acf(ts(w2, frequency = 24))
?ts
ts(w2, frequency = 24)
xx = ts(w2, frequency = 24)
acf(xx)
acf(xx, lag = 5000)
acf(xx, lag = 200000)
decompose(xx)
plot(decompose(xx))
?stl
stl(xx, s.window = "periodic")
plot(stl(xx, s.window = "periodic"))
?ts
24*365
xx2 = ts(w2, frequency = 8760)
plot(stl(xx2, s.window = "periodic"))
length(w2)/8760
arima(xx2, order = c(1, 0, 0))
plot(arima(xx2, order = c(1, 0, 0)))
?arima
options()
library(cimis)
installed.packages()
x = installed.packages()
rownames(x)
x$Built
class(x)
x[["Built"]]
colnames(x)
x["Built"]
x[."Built"]
x[,"Built"]
x[,"Built"] == "2.11.0"
x[,"Built"] != "2.11.0"
x[,"Built"] == "2.11.0"
x[,"Built"] != "2.11.0"
rownames(x)[x[,"Built"] != "2.11.0"]
reload = rownames(x)[x[,"Built"] != "2.11.0"]
?install.packages
.libPaths()
reload[1]
install.packages(reload[1])
?install.packages
?upgrade.pacakges
?upgrade.pacakge
?update.packages
reload
update.packages("abind")
install.packages("abind")
library(abind)
install.packages("reshape")
library(reshape)
?trycatch
??tryCatch
?tryCatch
for(i in reload){install.packages(i)}
library(XML)
citation(XML)
citation("XML")
library(clusterPCA)
library(cimis)
q()
?INSTALL
q()
x = c(10, 25, 119, 1302, 1390, 2203, 12901)
plot(x)
c(x, jitter(x), jitter(x))
plot(c(x, jitter(x), jitter(x)))
df = data.frame(x = rnorm(1000), y = rnorm(1000))
df
plot(df)
library(ellipse)
?ellipse
library(car)
data.ellipse(df)
data.ellipse(as.matrix(df))
p = data.ellipse(as.matrix(df))
head(p)
class(p)
rm(p)
data.ellipse
library(RKML)
?kml
data(elephantSeal)
elephantSeal
kml(elephantSeal)
kml(~ latitude + longitude @ time, data = elephantSeal)
kml
dir()
x
x = getURL("http://www.stackoverflow.com")
getNodeSet(x, "//*[contains(concat( " ", @class, " " ), concat( " ", "question-hyperlink", " " ))]"
getNodeSet(x, "//*[contains(concat( " ", @class, " " ), concat( " ", "question-hyperlink", " " ))]")
getNodeSet(x, '//*[contains(concat( " ", @class, " " ), concat( " ", "question-hyperlink", " " ))]')
getNodeSet(x, '//*[@class = ".question-hyperlink"]')
getNodeSet(x, '//[@class = ".question-hyperlink"]')
getNodeSet(x, '//*')
getNodeSet(x, '\\*')
getNodeSet(x, '//*')
getNodeSet(x, '//')
y = xmlParse(x)
x
x = getURL("http://www.stackoverflow.com/")
x
x = getURL("http://stackoverflow.com/")
x
y = htmlParse(x)
y = htmlParse(x, asText=T)
getNodeSet(y, '//*[contains(concat( " ", @class, " " ), concat( " ", "question-hyperlink", " " ))]')
y
getNodeSet(y, "\\a[@class = 'question-hyperlink']")
getNodeSet(y, "\\a")
getNodeSet(y, "//a")
getNodeSet(y, "//a[@class = 'question-hyperlink']")
xmlAttrs(getNodeSet(y, "//a[@class = 'question-hyperlink']"), "title")
?xmlAttrs
??attrs
xmlGetAttr(getNodeSet(y, "//a[@class = 'question-hyperlink']"), "title")
xpathApply(getNodeSet(y, "//a[@class = 'question-hyperlink']"), "title", xmlGetAttr)
z = getNodeSet(y, "//a[@class = 'question-hyperlink']")
?getNodeSet
sapply(z, function(zs)xmlGetAttr(z, "title"))
sapply(z, xmlGetAttrs, "title")
sapply(z, xmlGetAttr, "title")
ls()
c(0,0,0,1,1,0,1,1,1,2,2,3,3,3,2,2,2,1,1,0,0,0)
x = c(0,0,0,1,1,0,1,1,1,2,2,3,3,3,2,2,2,1,1,0,0,0)
plot(x)
plot(x, type = "s")
#rprotovis startup data#
set.seed(5)#
x = 1:10#
y = 2*x + rnorm(10, sd = 2)#
#
d = data.frame(x = x, y = y)#
rm(x, y)#
#
library(RJSONIO)#
#
toJSON.df = function(df){#
	tmp = split(df, seq(nrow(df)))#
	names(tmp) = NULL#
	tmp2 = toJSON(tmp)#
#	tmp3 = gsub('"([A-Za-z]+)":', "\\1:", tmp2)#
	tmp4 = gsub("\\n", "", tmp2)#
	tmp5 = gsub("\\},\\{", "\\},\n\\{", tmp4)#
	}#
	#
setwd("~/Rdev/Rprotovis")#
#
h = '<html> <head>#
<title></title>#
</head>#
#
<body>#
<script type="text/javascript" src="protovis-d3.2.js"></script>#
<script type="text/javascript+protovis">#
'#
#
size = function(width = 400, height = 400){#
	v = paste("var vis = new pv.Panel().width(", #
	width, #
	") .height(", #
	height, #
	");",#
	sep = "")#
	}#
	#
pxyplot = function(data){#
	xmax = max(data[1])#
	ymax = max(data[2])#
	paste(#
	h,#
	size(),#
	"vis.add(pv.Dot)\n",#
	".data(",#
	toJSON.df(data), ")",#
	".left(function(d) ")
)
toJSON.df = function(df){#
	tmp = split(df, seq(nrow(df)))#
	names(tmp) = NULL#
	tmp2 = toJSON(tmp)#
#	tmp3 = gsub('"([A-Za-z]+)":', "\\1:", tmp2)#
	tmp4 = gsub("\\n", "", tmp2)#
	tmp5 = gsub("\\},\\{", "\\},\n\\{", tmp4)#
	}#
	#
setwd("~/Rdev/Rprotovis")
toJSON.df
toJSON.df(x)
toJSON.df(df)
ls()
d
toJSON.df(d)
print(toJSON.df(d))
d = cbind(d, letters[1])
d
print(toJSON.df(d))
set.seed(5)#
x = 1:10#
y = 2*x + rnorm(10, sd = 2)#
#
d = data.frame(x = x, y = y)#
rm(x, y)
d
d$letters = letters[1]
d
toJSON(d)
toJSON.df(d)
print(toJSON.df(d))
class(toJSON.df(d))
class(toJSON(d))
print(toJSON.df(d))
cat(print(toJSON.df(d)))
cat(toJSON.df(d))
